// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  password           String?
  resetPasswordToken String? @map("reset_password_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")

  nom               String?
  prenom            String?
  agentconnect_info Json?

  accounts Account[]
  sessions Session[]

  brandId String
  brand   Brand  @relation(fields: [brandId], references: [id])

  apiKeys APIKey[]
  uploads Upload[]
  exports Export[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UploadType {
  API
  FILE
}

model Upload {
  id        String     @id @default(uuid())
  name      String?
  createdAt DateTime   @default(now()) @map("created_at")
  type      UploadType

  // Comment gerer le fait que ce qu'on stock a deja ete interprete ?
  // Enregistrer le fichier directment ? crypt√© ? 
  // Enregister un checksum ? 
  // Voir avec CleverCloud pour un stockage S3 des fichiers

  products Product[]

  status Status  @default(Pending)
  error  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  version   Version @relation(fields: [versionId], references: [id])
  versionId String

  @@map("uploads")
}

enum Status {
  Pending
  Processing
  Done
  Error
}

model Score {
  id           String @id @default(uuid())
  score        Float
  standardized Float

  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique @map("product_id")

  @@map("scores")
}

model Version {
  id      String @id @default(uuid())
  version String @unique
  link    String

  uploads Upload[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("versions")
}

model Product {
  id     String  @id @default(uuid())
  status Status  @default(Pending)
  error  String?

  gtins             String[] @map("gtins")
  internalReference String   @map("internal_reference")
  date              String?
  brand             String
  declaredScore     Float?   @map("declared_score")

  // Encrypted string
  category        String
  business        String
  countryDyeing   String @map("country_dyeing")
  countryFabric   String @map("country_fabric")
  countryMaking   String @map("country_making")
  countrySpinning String @map("country_spinning")
  impression      String

  // Encrypted number
  mass                 String
  price                String
  airTransportRatio    String @map("air_transport_ratio")
  numberOfReferences   String
  impressionPercentage String @map("impression_percentage")

  // Encrypted boolean
  fading       String
  traceability String
  upcycled     String

  materials   Material[]
  accessories Accessory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  upload   Upload @relation(fields: [uploadId], references: [id])
  uploadId String @map("upload_id")

  score Score?

  @@map("products")
}

model Material {
  id      String  @id @default(uuid())
  // Encrypted string
  slug    String
  country String?

  // Encrypted number
  share String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("materials")
}

model Accessory {
  id String @id @default(uuid())

  // Encrypted string
  slug String

  // Encrypted number
  quantity String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("accessories")
}

model Brand {
  id    String @id @default(uuid())
  name  String
  siret String @unique

  authorizedBy     Brand?  @relation("AuthorizedBrands", fields: [authorizedById], references: [id])
  authorizedById   String? @map("authorized_by_id")
  authorizedBrands Brand[] @relation("AuthorizedBrands")

  names BrandName[]
  users User[]

  @@map("brands")
}

model BrandName {
  id      String @id @default(uuid())
  name    String
  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String @map("brand_id")

  @@map("brand_names")
}

model APIKey {
  id        String    @id @default(uuid())
  key       String    @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  lastUsed  DateTime? @map("last_used")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

model Export {
  id        String   @id @default(uuid())
  status    Status   @default(Pending)
  createdAt DateTime @default(now()) @map("created_at")

  name  String
  brand String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("exports")
}
