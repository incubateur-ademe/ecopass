// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")

  nom               String?
  prenom            String?
  agentconnect_info Json?

  accounts Account[]
  sessions Session[]

  organizationId String?       @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id])

  apiKeys               APIKey[]
  uploads               Upload[]
  exports               Export[]
  uthorizedOrganization AuthorizedOrganization[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UploadType {
  API
  FILE
}

model Upload {
  id        String     @id @default(uuid())
  name      String?
  createdAt DateTime   @default(now()) @map("created_at")
  version   String
  type      UploadType

  products         Product[]
  reUploadProducts UploadProduct[]

  status Status  @default(Pending)
  error  String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id")

  @@index([createdById, type], map: "idx_upload_created_by_type")
  @@index([status, type, createdAt], map: "idx_upload_status_type_created_at")
  @@index([organizationId], map: "idx_upload_organization_id")
  @@map("uploads")
}

enum Status {
  Pending
  Processing
  Done
  Error
}

model Score {
  id           String @id @default(uuid())
  score        Float
  standardized Float

  durability Float

  acd Float
  cch Float
  etf Float
  fru Float
  fwe Float
  htc Float
  htn Float
  ior Float
  ldu Float
  mru Float
  ozd Float
  pco Float
  pma Float
  swe Float
  tre Float
  wtu Float

  microfibers    Float
  outOfEuropeEOL Float

  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique @map("product_id")

  @@map("scores")
}

model Product {
  id     String  @id @default(uuid())
  status Status  @default(Pending)
  error  String?
  hash   String

  gtins             String[] @map("gtins")
  internalReference String   @map("internal_reference")
  date              String?
  brand             String
  declaredScore     Float?   @map("declared_score")
  category          String

  // Encrypted string
  business        String
  countryDyeing   String @map("country_dyeing")
  countryFabric   String @map("country_fabric")
  countryMaking   String @map("country_making")
  countrySpinning String @map("country_spinning")
  impression      String

  // Encrypted number
  mass                 String
  price                String
  airTransportRatio    String @map("air_transport_ratio")
  numberOfReferences   String
  impressionPercentage String @map("impression_percentage")

  // Encrypted boolean
  fading   String
  upcycled String

  materials   Material[]
  accessories Accessory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  upload      Upload @relation(fields: [uploadId], references: [id])
  uploadId    String @map("upload_id")
  uploadOrder Int?   @map("upload_order")

  reUploads UploadProduct[]

  score Score?

  @@index([gtins], map: "idx_product_gtins", type: Gin)
  @@index([internalReference, status], map: "idx_product_internal_ref_status")
  @@index([brand], map: "idx_product_brand")
  @@map("products")
}

model Material {
  id      String  @id @default(uuid())
  // Encrypted string
  slug    String
  country String?

  // Encrypted number
  share String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId], map: "idx_material_product_id")
  @@map("materials")
}

model Accessory {
  id String @id @default(uuid())

  // Encrypted string
  slug String

  // Encrypted number
  quantity String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId], map: "idx_accessory_product_id")
  @@map("accessories")
}

model Organization {
  id    String @id @default(uuid())
  name  String
  siret String @unique

  authorizedBy            AuthorizedOrganization[] @relation("ToOrg")
  authorizedOrganizations AuthorizedOrganization[] @relation("FromOrg")

  brands Brand[]
  users  User[]
  upload Upload[]

  @@map("organizations")
}

model AuthorizedOrganization {
  id     String @id @default(uuid())
  fromId String @map("from_id")
  toId   String @map("to_id")

  from Organization @relation("FromOrg", fields: [fromId], references: [id])
  to   Organization @relation("ToOrg", fields: [toId], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by_id")

  active    Boolean   @default(true)
  removedAt DateTime? @map("removed_at")

  @@map("authorized_organizations")
}

model Brand {
  id   String @id @default(uuid())
  name String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@map("brand")
}

model APIKey {
  id        String    @id @default(uuid())
  key       String    @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  lastUsed  DateTime? @map("last_used")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

model Export {
  id        String   @id @default(uuid())
  status    Status   @default(Pending)
  createdAt DateTime @default(now()) @map("created_at")

  name  String
  brand String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@index([userId, brand, createdAt], map: "idx_export_user_brand_created_at")
  @@map("exports")
}

model UploadProduct {
  id          String @id @default(uuid())
  uploadOrder Int    @map("upload_order")

  upload   Upload @relation(fields: [uploadId], references: [id])
  uploadId String @map("upload_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@unique([uploadId, productId])
  @@map("upload_products")
}
