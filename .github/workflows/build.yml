name: Build
on:
  push:
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ecopass
          POSTGRES_PASSWORD: ecopass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "yarn"
      - name: Copy .env
        run: cp .env.dist .env
      - name: Inject secrets into .env
        run: |
          echo "INSEE_API_KEY=${{ secrets.INSEE_API_KEY }}" >> .env
          echo "STORAGE_ENCRYPTION_KEY=${{ secrets.STORAGE_ENCRYPTION_KEY }}" >> .env
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
          echo "PROCONNECT_CLIENT_ID=${{ secrets.PROCONNECT_CLIENT_ID }}" >> .env
          echo "PROCONNECT_CLIENT_SECRET=${{ secrets.PROCONNECT_CLIENT_SECRET }}" >> .env
          echo "PROCONNECT_DOMAIN=${{ secrets.PROCONNECT_DOMAIN }}" >> .env
          echo "INSEE_API_KEY=${{ secrets.INSEE_API_KEY }}" >> .env
          echo "ECOBALYSE_ENCRYPTION_KEY=${{ secrets.ECOBALYSE_ENCRYPTION_KEY }}" >> .env
          echo "CI=true" >> .env
          echo "BATCH_SIZE=20" >> .env
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Linter
        run: yarn lint
      - name: Run build
        run: yarn build
      - name: Migrate db
        run: yarn prisma migrate deploy
      - name: Seed db
        run: yarn prisma db seed
      - name: Run unit tests
        run: npx jest --runInBand
      - name: Seed db
        run: yarn prisma db seed
      - name: Decrypt Ecobalyse data
        run: yarn ecobalyse:data
      - name: Start server
        run: yarn start > server.txt &
      - name: Start queue
        run: yarn queue > queue.txt &
      - name: Install Playwright browsers
        run: npx playwright install chromium
      - name: Install Playwright deps
        run: npx playwright install-deps
      - name: Run e2e tests
        run: npx playwright test
      - name: Create artifacts directory
        run: mkdir -p ${{ github.workspace }}/tmp/artifacts
      - name: Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        id: lighthouseCheck
        with:
          device: all
          urls: "http://localhost:3000"
          outputDirectory: ${{ github.workspace }}/tmp/artifacts
      - name: Verify Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "100"
          minBestPracticesScore: "100"
      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Lighthouse reports
          path: ${{ github.workspace }}/tmp/artifacts
      - name: Upload playwright artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: test-results/
          retention-days: 7
      - name: Upload queue artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: queue-report
          path: queue.txt
          retention-days: 7
      - name: Upload server artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: server-report
          path: server.txt
          retention-days: 7
